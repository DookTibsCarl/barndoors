// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "js/app/abstractview"], function(jq, AbstractView) {
    var DefaultView;
    DefaultView = (function(_super) {
      __extends(DefaultView, _super);

      DefaultView.TOP_EDGE_INSET = 50;

      DefaultView.BOTTOM_EDGE_INSET = 90;

      DefaultView.TEXT_SHADOWBOX_HEIGHT = 100;

      DefaultView.EASE_FXN = "swing";

      DefaultView.ANIMATION_LENGTH_MS = 900;

      function DefaultView(targetDivName, imgWidth, imgHeight) {
        var bbEl, blackBarStyle, detailsEl, detailsStyle, doorEl, doorStyle, elementSuffix, i, imgEl, letter, side, textPadding, titleEl, titleStyle, vertPos, _i, _j, _len, _len1, _ref, _ref1, _ref2;
        this.targetDivName = targetDivName;
        this.imgWidth = imgWidth;
        this.imgHeight = imgHeight;
        console.log("constructing default view!");
        this.targetDiv = $("#" + this.targetDivName);
        _ref = this.createClippingPolygons(this.imgWidth, this.imgHeight, DefaultView.TOP_EDGE_INSET, DefaultView.BOTTOM_EDGE_INSET, DefaultView.TEXT_SHADOWBOX_HEIGHT), this.leftImagePoly = _ref[0], this.rightImagePoly = _ref[1], this.leftTextPoly = _ref[2], this.rightTextPoly = _ref[3];
        this.calculateCenteredSlidePositions();
        this.fleshOutInlineSVG();
        this.targetDiv.css({
          "background-color": "gray",
          "overflow": "hidden",
          "position": "absolute"
        });
        vertPos = (this.targetDiv.height() / 2) - (this.imgHeight / 2);
        this.leftDoors = [];
        this.rightDoors = [];
        _ref1 = ["A", "B"];
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          letter = _ref1[i];
          _ref2 = ["left", "right"];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            side = _ref2[_j];
            elementSuffix = "_" + side + "_" + i;
            doorEl = $("<div/>").attr("id", "door" + elementSuffix).appendTo(this.targetDiv);
            imgEl = $("<img/>").attr("id", "image" + elementSuffix).appendTo(doorEl);
            titleEl = $("<span/>").attr("id", "title" + elementSuffix).appendTo(doorEl);
            bbEl = $("<span/>").attr("id", "title" + elementSuffix).appendTo(doorEl);
            blackBarStyle = {
              position: "absolute",
              width: this.imgWidth + "px",
              left: "0px",
              bottom: "0px",
              height: "100px",
              background: "black",
              opacity: 0.5
            };
            bbEl.css(blackBarStyle);
            detailsEl = $("<span/>").attr("id", "details" + elementSuffix).appendTo(doorEl);
            doorStyle = {
              position: "inherit",
              top: vertPos + "px",
              display: (i === 0 ? "block" : "none")
            };
            titleStyle = {
              position: "absolute",
              bottom: "100px",
              letterSpacing: "1px",
              font: "bold 30px/30px Helvetica, Sans-Serif"
            };
            detailsStyle = {
              position: "absolute",
              bottom: "60px",
              letterSpacing: "1px",
              font: "12px/12px Arial",
              color: "white"
            };
            textPadding = "140px";
            if (side === "left") {
              titleStyle.right = textPadding;
              detailsStyle.right = textPadding;
              this.clipElement(this.leftImagePoly, imgEl, "imagePolySVG_left");
              this.clipElement(this.leftTextPoly, bbEl, "textPolySVG_left");
            } else {
              titleStyle.left = textPadding;
              detailsStyle.left = textPadding;
              this.clipElement(this.rightImagePoly, imgEl, "imagePolySVG_right");
              this.clipElement(this.rightTextPoly, bbEl, "textPolySVG_right");
            }
            this.putDoorInOpenPosition(doorEl, side);
            doorEl.css(doorStyle);
            titleEl.css(titleStyle);
            detailsEl.css(detailsStyle);
            if (side === "left") {
              this.leftDoors.push(doorEl);
            } else {
              this.rightDoors.push(doorEl);
            }
          }
        }
        this.activeDoorIndex = 0;

        /*
        blackBarEl = $("<span/>").attr('id', 'blackBarFoo').appendTo(@targetDiv)
        blackBarStyle = {
          position: "absolute",
          width: "100%",
          left: "0px",
          bottom: "0px",
          height: "110px",
          background: "red",
          opacity: 0.5
        }
        blackBarEl.css(blackBarStyle)
         */
      }

      DefaultView.prototype.cropImagesDelayed = function() {
        var elementSuffix, i, imgEl, letter, side, _i, _len, _ref, _results;
        console.log("DELAYED here we go [" + this + "]");
        _ref = ["A", "B"];
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          letter = _ref[i];
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = ["left", "right"];
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              side = _ref1[_j];
              elementSuffix = "_" + side + "_" + i;
              imgEl = $("#image" + elementSuffix);
              console.log("IMG EL IS [" + imgEl.attr('id') + "]...");
              if (side === "left") {
                _results1.push(this.clipElement(this.leftImagePoly, imgEl, "polySVG_left"));
              } else {
                _results1.push(this.clipElement(this.rightImagePoly, imgEl, "polySVG_right"));
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      DefaultView.prototype.fleshOutInlineSVG = function() {

        /* 
        svgEl = $("<svg/>").attr({"width": 0, "height": 0}).appendTo($(document.body))
        for side in ["left","right"]
          pathEl = $("<clipPath/>").attr("id", "imagePolySVG_" + side).appendTo(svgEl)
          polyEl = $("<polygon/>").attr("points", @translatePointsFromArrayToSVGNotation((if side == "left" then @leftImagePoly else @rightImagePoly))).appendTo(pathEl)
        
          pathEl = $("<clipPath/>").attr("id", "textPolySVG_" + side).appendTo(svgEl)
          polyEl = $("<polygon/>").attr("points", @translatePointsFromArrayToSVGNotation((if side == "left" then @leftTextPoly else @rightTextPoly))).appendTo(pathEl)
         */
        var side, _i, _len, _ref, _results;
        _ref = ["left", "right"];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          side = _ref[_i];
          $("#imagePolySVG_" + side + " > polygon").attr("points", this.translatePointsFromArrayToSVGNotation((side === "left" ? this.leftImagePoly : this.rightImagePoly)));
          _results.push($("#textPolySVG_" + side + " > polygon").attr("points", this.translatePointsFromArrayToSVGNotation((side === "left" ? this.leftTextPoly : this.rightTextPoly))));
        }
        return _results;
      };

      DefaultView.prototype.putDoorInOpenPosition = function(doorEl, side) {
        var debugAdjuster, leftPos;
        debugAdjuster = 0;
        if (side === "left") {
          leftPos = ((-1 * this.imgWidth) + debugAdjuster) + "px";
        } else {
          leftPos = (this.targetDiv.width() - debugAdjuster) + "px";
        }
        return doorEl.css("left", leftPos);
      };

      DefaultView.prototype.calculateCenteredSlidePositions = function() {
        var centerOfDiv, choppedPixels, gap, slantAdjustment;
        slantAdjustment = Math.abs(DefaultView.TOP_EDGE_INSET - DefaultView.BOTTOM_EDGE_INSET) / 2;
        choppedPixels = Math.min(DefaultView.TOP_EDGE_INSET, DefaultView.BOTTOM_EDGE_INSET);
        centerOfDiv = this.targetDiv.width() / 2;
        this.leftDoorDestination = centerOfDiv - (this.imgWidth - slantAdjustment) + choppedPixels;
        this.rightDoorDestination = centerOfDiv - slantAdjustment - choppedPixels;
        gap = 0;
        if (gap > 0) {
          this.leftDoorDestination -= gap;
          return this.rightDoorDestination += gap;
        }
      };

      DefaultView.prototype.renderInitialView = function(pair) {
        console.log("rendering with [" + pair + "]...");
        this.leftSlide = pair.leftSlide;
        this.rightSlide = pair.rightSlide;
        return this.centerSlides(false);
      };

      DefaultView.prototype.showNextPair = function(pair) {
        var doorEl, i, oldDoors, sides, _i, _len, _ref;
        this.inactiveDoorIndex = this.activeDoorIndex;
        this.activeDoorIndex++;
        if (this.activeDoorIndex >= this.leftDoors.length) {
          this.activeDoorIndex = 0;
        }
        this.leftSlide = pair.leftSlide;
        this.rightSlide = pair.rightSlide;
        sides = ["left", "right"];
        oldDoors = [this.leftDoors[this.inactiveDoorIndex], this.rightDoors[this.inactiveDoorIndex]];
        _ref = [this.leftDoors[this.activeDoorIndex], this.rightDoors[this.activeDoorIndex]];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          doorEl = _ref[i];
          doorEl.css("display", "block");
          this.putDoorInOpenPosition(doorEl, sides[i]);
          this.stackElements(doorEl, oldDoors[i]);
        }
        return this.centerSlides();
      };

      DefaultView.prototype.centerSlides = function(doAnimate) {
        var destinations, detailsEl, doorEl, i, imgEl, sides, slide, slides, suffix, titleEl, _i, _len, _ref, _results;
        if (doAnimate == null) {
          doAnimate = true;
        }
        sides = ["left", "right"];
        slides = [this.leftSlide, this.rightSlide];
        destinations = [this.leftDoorDestination, this.rightDoorDestination];
        this.doorsShut = 0;
        _ref = [this.leftDoors[this.activeDoorIndex], this.rightDoors[this.activeDoorIndex]];
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          doorEl = _ref[i];
          suffix = "_" + sides[i] + "_" + this.activeDoorIndex;
          slide = slides[i];
          imgEl = $("#image" + suffix);
          titleEl = $("#title" + suffix);
          detailsEl = $("#details" + suffix);
          imgEl.attr("src", slide.imgUrl);
          titleEl.css("color", slide.fontColor);
          titleEl.html(slide.title);
          detailsEl.html(slide.details);
          if (doAnimate) {
            _results.push(doorEl.animate({
              "left": destinations[i] + "px"
            }, DefaultView.ANIMATION_LENGTH_MS, DefaultView.EASE_FXN, ((function(_this) {
              return function() {
                return _this.onAnimationComplete();
              };
            })(this))));
          } else {
            _results.push(doorEl.css("left", destinations[i] + "px"));
          }
        }
        return _results;
      };

      DefaultView.prototype.onAnimationComplete = function() {
        this.doorsShut++;
        if (this.doorsShut === 2) {

        } else {

        }
      };

      DefaultView.prototype.pseudoDestructor = function() {
        console.log("cleaning up custom default...");
        $("#" + this.targetDivName + " > div").remove();
        this.targetDiv.css({
          "background-color": "",
          "overflow": "",
          "position": ""
        });
        return DefaultView.__super__.pseudoDestructor.apply(this, arguments);
      };

      return DefaultView;

    })(AbstractView);
    return DefaultView;
  });

}).call(this);

//# sourceMappingURL=defaultview.map
