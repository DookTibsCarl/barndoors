// Generated by CoffeeScript 1.7.1

/*

this class is responsible for returning a valid instance of AbstractView to the controller. This depends on:
  1. screen size
  2. device capability

the main app controller just gets back an object that conforms (informally since this is JS) to some interface,
and does not care about the specifics of the implementation.
 */

(function() {
  define(["jquery", "js/app/defaultview", "js/app/simpleview"], function(jq, DefaultView, SimpleView) {
    var ResponsiveViewFactory;
    ResponsiveViewFactory = (function() {
      ResponsiveViewFactory.BREAKPOINTS = [
        {
          size: 808,
          descriptor: "small"
        }, {
          descriptor: "normal"
        }
      ];

      function ResponsiveViewFactory() {
        this.$ = jq;
        this.breakPointIndex = 0;
        $(window).resize(((function(_this) {
          return function() {
            return _this.windowWasResized();
          };
        })(this)));
        this.windowWasResized(true);
      }

      ResponsiveViewFactory.prototype.findBreakpointIndex = function(width) {
        var bp, i, _i, _len, _ref;
        _ref = ResponsiveViewFactory.BREAKPOINTS;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          bp = _ref[i];
          if ((bp.size != null) && width <= bp.size) {
            return i;
          }
        }
        return ResponsiveViewFactory.BREAKPOINTS.length - 1;
      };

      ResponsiveViewFactory.prototype.getActiveViewDescriptor = function() {
        return ResponsiveViewFactory.BREAKPOINTS[this.breakPointIndex].descriptor;
      };

      ResponsiveViewFactory.prototype.constructActiveView = function(divName, imgWidth, imgHeight) {
        var desc, rv;
        desc = this.getActiveViewDescriptor();
        rv = null;
        if (desc === "small") {
          rv = new SimpleView(divName, imgWidth, imgHeight);
        } else if (desc === "normal") {
          rv = new DefaultView(divName, imgWidth, imgHeight);
        }
        return rv;
      };

      ResponsiveViewFactory.prototype.windowWasResized = function(forceChange) {
        var h, oldIdx, updatedIdx, w;
        if (forceChange == null) {
          forceChange = false;
        }
        w = $(window).width();
        h = $(window).height();
        $("#debugWindowWidth").text(w);
        $("#debugWindowHeight").text(h);
        oldIdx = this.breakPointIndex;
        updatedIdx = this.findBreakpointIndex(w);
        if (oldIdx !== updatedIdx || forceChange) {
          this.breakPointIndex = updatedIdx;
          $("#debugRespView").text(this.getActiveViewDescriptor());
          return $(document).trigger('screenSizeChanged', {
            'viewDescriptor': this.getActiveViewDescriptor()
          });
        }
      };

      return ResponsiveViewFactory;

    })();
    return ResponsiveViewFactory;
  });

}).call(this);
